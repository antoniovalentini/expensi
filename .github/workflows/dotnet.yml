name: .NET CI & Docker CD

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ] # Trigger on pushes to main AND on tags starting with 'v'
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_IMAGE_NAME: avdockie/expensi

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        id: test
        run: dotnet test --no-build --configuration Release --verbosity normal

  publish_docker_image:
    runs-on: ubuntu-latest
    needs: build_and_test
    # Only run this job for tagged pushes (e.g., when you push 'v1.0.0' or 'v1.2.3-rc1')
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # This should be an API Key / Personal Access Token

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            # Uses the Git tag, e.g., v1.0.0, as Docker tag (strips 'v' prefix if present)
            type=semver,pattern={{version}}
            # Also create 'latest' tag for this build
            type=raw,value=latest,enable=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: . # Assumes Dockerfile is in the root of your repository
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # Enable GitHub Actions cache for Docker layers
          cache-to: type=gha,mode=max # Save to GitHub Actions cache
