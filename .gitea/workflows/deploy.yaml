name: Build, Push and Deploy Docker Image

run-name: Build and Deploy by @${{ gitea.actor }} on ${{ gitea.ref_name }}

on:
  push:
    branches:
      - main # Or your primary branch, e.g., master

jobs:
  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest # Or your preferred runner OS with Docker
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Login to Gitea Container Registry
        # Uses the GITEA_TOKEN automatically provided by Gitea Actions
        # Assumes the user triggering the action has push rights to the registry
        uses: docker/login-action@v3
        with:
          registry: ${{ gitea.instance }}
          username: ${{ gitea.actor }}
          password: ${{ secrets.GITEA_TOKEN }}

      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          # Assumes Dockerfile is at the root, change 'context' if needed
          file: ./Dockerfile
          push: true
          # Tags image with 'latest' and the commit SHA
          tags: |
            ${{ gitea.instance }}/${{ gitea.owner }}/${{ gitea.repository }}:latest
            ${{ gitea.instance }}/${{ gitea.owner }}/${{ gitea.repository }}:${{ gitea.short_sha }}
          # Optional: Enable build cache for faster builds
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # deploy:
  #   name: Deploy to Server
  #   needs: build-and-push # Run only after build-and-push succeeds
  #   runs-on: ubuntu-latest # Runner for the deploy job itself
  #   if: success() # Only run if build-and-push job was successful
  #   steps:
  #     - name: Deploy to Docker host via SSH
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ secrets.DEPLOY_HOST }}         # IP or hostname of your Docker server
  #         username: ${{ secrets.DEPLOY_USER }}     # SSH username for the server
  #         key: ${{ secrets.DEPLOY_SSH_KEY }}       # Private SSH key for authentication
  #         script: |
  #           set -e # Exit immediately if a command exits with a non-zero status.

  #           # Login to Gitea Registry on the deployment host
  #           # Use secrets for credentials on the remote host
  #           echo "Logging into Gitea Registry: ${{ gitea.instance }}"
  #           echo "${{ secrets.DEPLOY_REGISTRY_PASSWORD }}" | docker login ${{ gitea.instance }} -u "${{ secrets.DEPLOY_REGISTRY_USER }}" --password-stdin

  #           # Define image and container details
  #           IMAGE_TAG="${{ gitea.short_sha }}" # Use the specific commit SHA tag
  #           IMAGE_NAME="${{ gitea.instance }}/${{ gitea.owner }}/${{ gitea.repository }}:${IMAGE_TAG}"
  #           LATEST_IMAGE_NAME="${{ gitea.instance }}/${{ gitea.owner }}/${{ gitea.repository }}:latest"
  #           CONTAINER_NAME="my-awesome-app" # <<< CHANGE THIS to your desired container name

  #           echo "Pulling new image: ${IMAGE_NAME}"
  #           docker pull $IMAGE_NAME
  #           docker pull $LATEST_IMAGE_NAME # Also pull latest if you use it

  #           echo "Stopping and removing existing container: ${CONTAINER_NAME}"
  #           docker stop $CONTAINER_NAME || true # Continue if stop fails (e.g., container not running)
  #           docker rm $CONTAINER_NAME || true   # Continue if remove fails (e.g., container doesn't exist)

  #           echo "Starting new container: ${CONTAINER_NAME} from image ${IMAGE_NAME}"
  #           # Customize the docker run command below!
  #           # Adjust ports (-p), volumes (-v), environment variables (-e), restart policy etc.
  #           # Pass database connection details as environment variables using secrets
  #           docker run -d --name $CONTAINER_NAME \
  #             -p 8080:80 \
  #             --restart unless-stopped \
  #             -e PostgresConnection__Host='${{ secrets.DEPLOY_DB_HOST }}' \
  #             -e PostgresConnection__Database='${{ secrets.DEPLOY_DB_NAME }}' \
  #             -e PostgresConnection__Username='${{ secrets.DEPLOY_DB_USER }}' \
  #             -e PostgresConnection__Password='${{ secrets.DEPLOY_DB_PASSWORD }}' \
  #             -e ASPNETCORE_ENVIRONMENT=Production `# Optional: Set environment if needed` \
  #             $IMAGE_NAME

  #           echo "Deployment complete. Cleaning up login."
  #           docker logout ${{ gitea.instance }}

  #           # Optional: Add 'docker image prune -f' here if you want to clean up old images on the host
  #           # Be careful with pruning to not remove images needed by other containers.